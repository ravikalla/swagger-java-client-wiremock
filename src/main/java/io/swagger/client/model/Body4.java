/*
 * WireMock
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.26.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.AdminmappingsRequestBasicAuthCredentials;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * Body4
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-08-02T03:16:43.324Z[GMT]")
public class Body4 {
  @SerializedName("method")
  private String method = null;

  @SerializedName("url")
  private String url = null;

  @SerializedName("urlPath")
  private String urlPath = null;

  @SerializedName("urlPathPattern")
  private String urlPathPattern = null;

  @SerializedName("urlPattern")
  private String urlPattern = null;

  @SerializedName("queryParameters")
  private Object queryParameters = null;

  @SerializedName("headers")
  private Object headers = null;

  @SerializedName("basicAuthCredentials")
  private AdminmappingsRequestBasicAuthCredentials basicAuthCredentials = null;

  @SerializedName("cookies")
  private Object cookies = null;

  @SerializedName("bodyPatterns")
  private List<Object> bodyPatterns = null;

  public Body4 method(String method) {
    this.method = method;
    return this;
  }

   /**
   * The HTTP request method e.g. GET
   * @return method
  **/
  @Schema(description = "The HTTP request method e.g. GET")
  public String getMethod() {
    return method;
  }

  public void setMethod(String method) {
    this.method = method;
  }

  public Body4 url(String url) {
    this.url = url;
    return this;
  }

   /**
   * The path and query to match exactly against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.
   * @return url
  **/
  @Schema(description = "The path and query to match exactly against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.")
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }

  public Body4 urlPath(String urlPath) {
    this.urlPath = urlPath;
    return this;
  }

   /**
   * The path to match exactly against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.
   * @return urlPath
  **/
  @Schema(description = "The path to match exactly against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.")
  public String getUrlPath() {
    return urlPath;
  }

  public void setUrlPath(String urlPath) {
    this.urlPath = urlPath;
  }

  public Body4 urlPathPattern(String urlPathPattern) {
    this.urlPathPattern = urlPathPattern;
    return this;
  }

   /**
   * The path regex to match against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.
   * @return urlPathPattern
  **/
  @Schema(description = "The path regex to match against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.")
  public String getUrlPathPattern() {
    return urlPathPattern;
  }

  public void setUrlPathPattern(String urlPathPattern) {
    this.urlPathPattern = urlPathPattern;
  }

  public Body4 urlPattern(String urlPattern) {
    this.urlPattern = urlPattern;
    return this;
  }

   /**
   * The path and query regex to match against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.
   * @return urlPattern
  **/
  @Schema(description = "The path and query regex to match against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.")
  public String getUrlPattern() {
    return urlPattern;
  }

  public void setUrlPattern(String urlPattern) {
    this.urlPattern = urlPattern;
  }

  public Body4 queryParameters(Object queryParameters) {
    this.queryParameters = queryParameters;
    return this;
  }

   /**
   * Query parameter patterns to match against in the &lt;key&gt;: { \&quot;&lt;predicate&gt;\&quot;: \&quot;&lt;value&gt;\&quot; } form
   * @return queryParameters
  **/
  @Schema(description = "Query parameter patterns to match against in the <key>: { \"<predicate>\": \"<value>\" } form")
  public Object getQueryParameters() {
    return queryParameters;
  }

  public void setQueryParameters(Object queryParameters) {
    this.queryParameters = queryParameters;
  }

  public Body4 headers(Object headers) {
    this.headers = headers;
    return this;
  }

   /**
   * Header patterns to match against in the &lt;key&gt;: { \&quot;&lt;predicate&gt;\&quot;: \&quot;&lt;value&gt;\&quot; } form
   * @return headers
  **/
  @Schema(description = "Header patterns to match against in the <key>: { \"<predicate>\": \"<value>\" } form")
  public Object getHeaders() {
    return headers;
  }

  public void setHeaders(Object headers) {
    this.headers = headers;
  }

  public Body4 basicAuthCredentials(AdminmappingsRequestBasicAuthCredentials basicAuthCredentials) {
    this.basicAuthCredentials = basicAuthCredentials;
    return this;
  }

   /**
   * Get basicAuthCredentials
   * @return basicAuthCredentials
  **/
  @Schema(description = "")
  public AdminmappingsRequestBasicAuthCredentials getBasicAuthCredentials() {
    return basicAuthCredentials;
  }

  public void setBasicAuthCredentials(AdminmappingsRequestBasicAuthCredentials basicAuthCredentials) {
    this.basicAuthCredentials = basicAuthCredentials;
  }

  public Body4 cookies(Object cookies) {
    this.cookies = cookies;
    return this;
  }

   /**
   * Cookie patterns to match against in the &lt;key&gt;: { \&quot;&lt;predicate&gt;\&quot;: \&quot;&lt;value&gt;\&quot; } form
   * @return cookies
  **/
  @Schema(description = "Cookie patterns to match against in the <key>: { \"<predicate>\": \"<value>\" } form")
  public Object getCookies() {
    return cookies;
  }

  public void setCookies(Object cookies) {
    this.cookies = cookies;
  }

  public Body4 bodyPatterns(List<Object> bodyPatterns) {
    this.bodyPatterns = bodyPatterns;
    return this;
  }

  public Body4 addBodyPatternsItem(Object bodyPatternsItem) {
    if (this.bodyPatterns == null) {
      this.bodyPatterns = new ArrayList<Object>();
    }
    this.bodyPatterns.add(bodyPatternsItem);
    return this;
  }

   /**
   * Request body patterns to match against in the &lt;key&gt;: { \&quot;&lt;predicate&gt;\&quot;: \&quot;&lt;value&gt;\&quot; } form
   * @return bodyPatterns
  **/
  @Schema(description = "Request body patterns to match against in the <key>: { \"<predicate>\": \"<value>\" } form")
  public List<Object> getBodyPatterns() {
    return bodyPatterns;
  }

  public void setBodyPatterns(List<Object> bodyPatterns) {
    this.bodyPatterns = bodyPatterns;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Body4 body4 = (Body4) o;
    return Objects.equals(this.method, body4.method) &&
        Objects.equals(this.url, body4.url) &&
        Objects.equals(this.urlPath, body4.urlPath) &&
        Objects.equals(this.urlPathPattern, body4.urlPathPattern) &&
        Objects.equals(this.urlPattern, body4.urlPattern) &&
        Objects.equals(this.queryParameters, body4.queryParameters) &&
        Objects.equals(this.headers, body4.headers) &&
        Objects.equals(this.basicAuthCredentials, body4.basicAuthCredentials) &&
        Objects.equals(this.cookies, body4.cookies) &&
        Objects.equals(this.bodyPatterns, body4.bodyPatterns);
  }

  @Override
  public int hashCode() {
    return Objects.hash(method, url, urlPath, urlPathPattern, urlPattern, queryParameters, headers, basicAuthCredentials, cookies, bodyPatterns);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Body4 {\n");
    
    sb.append("    method: ").append(toIndentedString(method)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    urlPath: ").append(toIndentedString(urlPath)).append("\n");
    sb.append("    urlPathPattern: ").append(toIndentedString(urlPathPattern)).append("\n");
    sb.append("    urlPattern: ").append(toIndentedString(urlPattern)).append("\n");
    sb.append("    queryParameters: ").append(toIndentedString(queryParameters)).append("\n");
    sb.append("    headers: ").append(toIndentedString(headers)).append("\n");
    sb.append("    basicAuthCredentials: ").append(toIndentedString(basicAuthCredentials)).append("\n");
    sb.append("    cookies: ").append(toIndentedString(cookies)).append("\n");
    sb.append("    bodyPatterns: ").append(toIndentedString(bodyPatterns)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
