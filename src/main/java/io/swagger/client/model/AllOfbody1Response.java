/*
 * WireMock
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.26.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * AllOfbody1Response
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-08-02T03:16:43.324Z[GMT]")
public class AllOfbody1Response {
  @SerializedName("status")
  private Integer status = null;

  @SerializedName("statusMessage")
  private String statusMessage = null;

  @SerializedName("headers")
  private Object headers = null;

  @SerializedName("additionalProxyRequestHeaders")
  private Object additionalProxyRequestHeaders = null;

  @SerializedName("body")
  private String body = null;

  @SerializedName("base64Body")
  private String base64Body = null;

  @SerializedName("jsonBody")
  private Object jsonBody = null;

  @SerializedName("bodyFileName")
  private String bodyFileName = null;

  /**
   * The fault to apply (instead of a full, valid response).
   */
  @JsonAdapter(FaultEnum.Adapter.class)
  public enum FaultEnum {
    CONNECTION_RESET_BY_PEER("CONNECTION_RESET_BY_PEER"),
    EMPTY_RESPONSE("EMPTY_RESPONSE"),
    MALFORMED_RESPONSE_CHUNK("MALFORMED_RESPONSE_CHUNK"),
    RANDOM_DATA_THEN_CLOSE("RANDOM_DATA_THEN_CLOSE");

    private String value;

    FaultEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static FaultEnum fromValue(String text) {
      for (FaultEnum b : FaultEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<FaultEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FaultEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FaultEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return FaultEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("fault")
  private FaultEnum fault = null;

  @SerializedName("fixedDelayMilliseconds")
  private Integer fixedDelayMilliseconds = null;

  @SerializedName("fromConfiguredStub")
  private Boolean fromConfiguredStub = null;

  @SerializedName("proxyBaseUrl")
  private String proxyBaseUrl = null;

  @SerializedName("transformerParameters")
  private Object transformerParameters = null;

  @SerializedName("transformers")
  private List<String> transformers = null;

  public AllOfbody1Response status(Integer status) {
    this.status = status;
    return this;
  }

   /**
   * The HTTP status code to be returned
   * @return status
  **/
  @Schema(description = "The HTTP status code to be returned")
  public Integer getStatus() {
    return status;
  }

  public void setStatus(Integer status) {
    this.status = status;
  }

  public AllOfbody1Response statusMessage(String statusMessage) {
    this.statusMessage = statusMessage;
    return this;
  }

   /**
   * The HTTP status message to be returned
   * @return statusMessage
  **/
  @Schema(description = "The HTTP status message to be returned")
  public String getStatusMessage() {
    return statusMessage;
  }

  public void setStatusMessage(String statusMessage) {
    this.statusMessage = statusMessage;
  }

  public AllOfbody1Response headers(Object headers) {
    this.headers = headers;
    return this;
  }

   /**
   * Map of response headers to send
   * @return headers
  **/
  @Schema(description = "Map of response headers to send")
  public Object getHeaders() {
    return headers;
  }

  public void setHeaders(Object headers) {
    this.headers = headers;
  }

  public AllOfbody1Response additionalProxyRequestHeaders(Object additionalProxyRequestHeaders) {
    this.additionalProxyRequestHeaders = additionalProxyRequestHeaders;
    return this;
  }

   /**
   * Extra request headers to send when proxying to another host.
   * @return additionalProxyRequestHeaders
  **/
  @Schema(description = "Extra request headers to send when proxying to another host.")
  public Object getAdditionalProxyRequestHeaders() {
    return additionalProxyRequestHeaders;
  }

  public void setAdditionalProxyRequestHeaders(Object additionalProxyRequestHeaders) {
    this.additionalProxyRequestHeaders = additionalProxyRequestHeaders;
  }

  public AllOfbody1Response body(String body) {
    this.body = body;
    return this;
  }

   /**
   * The response body as a string. Only one of body, base64Body, jsonBody or bodyFileName may be specified.
   * @return body
  **/
  @Schema(description = "The response body as a string. Only one of body, base64Body, jsonBody or bodyFileName may be specified.")
  public String getBody() {
    return body;
  }

  public void setBody(String body) {
    this.body = body;
  }

  public AllOfbody1Response base64Body(String base64Body) {
    this.base64Body = base64Body;
    return this;
  }

   /**
   * The response body as a base64 encoded string (useful for binary content). Only one of body, base64Body, jsonBody or bodyFileName may be specified.
   * @return base64Body
  **/
  @Schema(description = "The response body as a base64 encoded string (useful for binary content). Only one of body, base64Body, jsonBody or bodyFileName may be specified.")
  public String getBase64Body() {
    return base64Body;
  }

  public void setBase64Body(String base64Body) {
    this.base64Body = base64Body;
  }

  public AllOfbody1Response jsonBody(Object jsonBody) {
    this.jsonBody = jsonBody;
    return this;
  }

   /**
   * The response body as a JSON object. Only one of body, base64Body, jsonBody or bodyFileName may be specified.
   * @return jsonBody
  **/
  @Schema(description = "The response body as a JSON object. Only one of body, base64Body, jsonBody or bodyFileName may be specified.")
  public Object getJsonBody() {
    return jsonBody;
  }

  public void setJsonBody(Object jsonBody) {
    this.jsonBody = jsonBody;
  }

  public AllOfbody1Response bodyFileName(String bodyFileName) {
    this.bodyFileName = bodyFileName;
    return this;
  }

   /**
   * The path to the file containing the response body, relative to the configured file root. Only one of body, base64Body, jsonBody or bodyFileName may be specified.
   * @return bodyFileName
  **/
  @Schema(description = "The path to the file containing the response body, relative to the configured file root. Only one of body, base64Body, jsonBody or bodyFileName may be specified.")
  public String getBodyFileName() {
    return bodyFileName;
  }

  public void setBodyFileName(String bodyFileName) {
    this.bodyFileName = bodyFileName;
  }

  public AllOfbody1Response fault(FaultEnum fault) {
    this.fault = fault;
    return this;
  }

   /**
   * The fault to apply (instead of a full, valid response).
   * @return fault
  **/
  @Schema(description = "The fault to apply (instead of a full, valid response).")
  public FaultEnum getFault() {
    return fault;
  }

  public void setFault(FaultEnum fault) {
    this.fault = fault;
  }

  public AllOfbody1Response fixedDelayMilliseconds(Integer fixedDelayMilliseconds) {
    this.fixedDelayMilliseconds = fixedDelayMilliseconds;
    return this;
  }

   /**
   * Number of milliseconds to delay be before sending the response.
   * @return fixedDelayMilliseconds
  **/
  @Schema(description = "Number of milliseconds to delay be before sending the response.")
  public Integer getFixedDelayMilliseconds() {
    return fixedDelayMilliseconds;
  }

  public void setFixedDelayMilliseconds(Integer fixedDelayMilliseconds) {
    this.fixedDelayMilliseconds = fixedDelayMilliseconds;
  }

  public AllOfbody1Response fromConfiguredStub(Boolean fromConfiguredStub) {
    this.fromConfiguredStub = fromConfiguredStub;
    return this;
  }

   /**
   * Read-only flag indicating false if this was the default, unmatched response. Not present otherwise.
   * @return fromConfiguredStub
  **/
  @Schema(description = "Read-only flag indicating false if this was the default, unmatched response. Not present otherwise.")
  public Boolean isFromConfiguredStub() {
    return fromConfiguredStub;
  }

  public void setFromConfiguredStub(Boolean fromConfiguredStub) {
    this.fromConfiguredStub = fromConfiguredStub;
  }

  public AllOfbody1Response proxyBaseUrl(String proxyBaseUrl) {
    this.proxyBaseUrl = proxyBaseUrl;
    return this;
  }

   /**
   * The base URL of the target to proxy matching requests to.
   * @return proxyBaseUrl
  **/
  @Schema(description = "The base URL of the target to proxy matching requests to.")
  public String getProxyBaseUrl() {
    return proxyBaseUrl;
  }

  public void setProxyBaseUrl(String proxyBaseUrl) {
    this.proxyBaseUrl = proxyBaseUrl;
  }

  public AllOfbody1Response transformerParameters(Object transformerParameters) {
    this.transformerParameters = transformerParameters;
    return this;
  }

   /**
   * Parameters to apply to response transformers.
   * @return transformerParameters
  **/
  @Schema(description = "Parameters to apply to response transformers.")
  public Object getTransformerParameters() {
    return transformerParameters;
  }

  public void setTransformerParameters(Object transformerParameters) {
    this.transformerParameters = transformerParameters;
  }

  public AllOfbody1Response transformers(List<String> transformers) {
    this.transformers = transformers;
    return this;
  }

  public AllOfbody1Response addTransformersItem(String transformersItem) {
    if (this.transformers == null) {
      this.transformers = new ArrayList<String>();
    }
    this.transformers.add(transformersItem);
    return this;
  }

   /**
   * List of names of transformers to apply to this response.
   * @return transformers
  **/
  @Schema(description = "List of names of transformers to apply to this response.")
  public List<String> getTransformers() {
    return transformers;
  }

  public void setTransformers(List<String> transformers) {
    this.transformers = transformers;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AllOfbody1Response allOfbody1Response = (AllOfbody1Response) o;
    return Objects.equals(this.status, allOfbody1Response.status) &&
        Objects.equals(this.statusMessage, allOfbody1Response.statusMessage) &&
        Objects.equals(this.headers, allOfbody1Response.headers) &&
        Objects.equals(this.additionalProxyRequestHeaders, allOfbody1Response.additionalProxyRequestHeaders) &&
        Objects.equals(this.body, allOfbody1Response.body) &&
        Objects.equals(this.base64Body, allOfbody1Response.base64Body) &&
        Objects.equals(this.jsonBody, allOfbody1Response.jsonBody) &&
        Objects.equals(this.bodyFileName, allOfbody1Response.bodyFileName) &&
        Objects.equals(this.fault, allOfbody1Response.fault) &&
        Objects.equals(this.fixedDelayMilliseconds, allOfbody1Response.fixedDelayMilliseconds) &&
        Objects.equals(this.fromConfiguredStub, allOfbody1Response.fromConfiguredStub) &&
        Objects.equals(this.proxyBaseUrl, allOfbody1Response.proxyBaseUrl) &&
        Objects.equals(this.transformerParameters, allOfbody1Response.transformerParameters) &&
        Objects.equals(this.transformers, allOfbody1Response.transformers);
  }

  @Override
  public int hashCode() {
    return Objects.hash(status, statusMessage, headers, additionalProxyRequestHeaders, body, base64Body, jsonBody, bodyFileName, fault, fixedDelayMilliseconds, fromConfiguredStub, proxyBaseUrl, transformerParameters, transformers);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AllOfbody1Response {\n");
    
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    statusMessage: ").append(toIndentedString(statusMessage)).append("\n");
    sb.append("    headers: ").append(toIndentedString(headers)).append("\n");
    sb.append("    additionalProxyRequestHeaders: ").append(toIndentedString(additionalProxyRequestHeaders)).append("\n");
    sb.append("    body: ").append(toIndentedString(body)).append("\n");
    sb.append("    base64Body: ").append(toIndentedString(base64Body)).append("\n");
    sb.append("    jsonBody: ").append(toIndentedString(jsonBody)).append("\n");
    sb.append("    bodyFileName: ").append(toIndentedString(bodyFileName)).append("\n");
    sb.append("    fault: ").append(toIndentedString(fault)).append("\n");
    sb.append("    fixedDelayMilliseconds: ").append(toIndentedString(fixedDelayMilliseconds)).append("\n");
    sb.append("    fromConfiguredStub: ").append(toIndentedString(fromConfiguredStub)).append("\n");
    sb.append("    proxyBaseUrl: ").append(toIndentedString(proxyBaseUrl)).append("\n");
    sb.append("    transformerParameters: ").append(toIndentedString(transformerParameters)).append("\n");
    sb.append("    transformers: ").append(toIndentedString(transformers)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
