/*
 * WireMock
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.26.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * Body8
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-08-02T03:16:43.324Z[GMT]")
public class Body8 {
  @SerializedName("method")
  private String method = null;

  @SerializedName("url")
  private String url = null;

  @SerializedName("absoluteUrl")
  private String absoluteUrl = null;

  @SerializedName("headers")
  private Object headers = null;

  @SerializedName("cookies")
  private Object cookies = null;

  @SerializedName("body")
  private String body = null;

  public Body8 method(String method) {
    this.method = method;
    return this;
  }

   /**
   * The HTTP request method
   * @return method
  **/
  @Schema(example = "GET", description = "The HTTP request method")
  public String getMethod() {
    return method;
  }

  public void setMethod(String method) {
    this.method = method;
  }

  public Body8 url(String url) {
    this.url = url;
    return this;
  }

   /**
   * The path and query to match exactly against
   * @return url
  **/
  @Schema(example = "/received-request/2", description = "The path and query to match exactly against")
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }

  public Body8 absoluteUrl(String absoluteUrl) {
    this.absoluteUrl = absoluteUrl;
    return this;
  }

   /**
   * The full URL to match against
   * @return absoluteUrl
  **/
  @Schema(example = "http://localhost:56738/received-request/2", description = "The full URL to match against")
  public String getAbsoluteUrl() {
    return absoluteUrl;
  }

  public void setAbsoluteUrl(String absoluteUrl) {
    this.absoluteUrl = absoluteUrl;
  }

  public Body8 headers(Object headers) {
    this.headers = headers;
    return this;
  }

   /**
   * Header patterns to match against in the &lt;key&gt;: { \&quot;&lt;predicate&gt;\&quot;: \&quot;&lt;value&gt;\&quot; } form
   * @return headers
  **/
  @Schema(example = "{\"Connection\":\"keep-alive\",\"Host\":\"localhost:56738\",\"User-Agent\":\"Apache-HttpClient/4.5.1 (Java/1.7.0_51)\"}", description = "Header patterns to match against in the <key>: { \"<predicate>\": \"<value>\" } form")
  public Object getHeaders() {
    return headers;
  }

  public void setHeaders(Object headers) {
    this.headers = headers;
  }

  public Body8 cookies(Object cookies) {
    this.cookies = cookies;
    return this;
  }

   /**
   * Cookie patterns to match against in the &lt;key&gt;: { \&quot;&lt;predicate&gt;\&quot;: \&quot;&lt;value&gt;\&quot; } form
   * @return cookies
  **/
  @Schema(example = "{}", description = "Cookie patterns to match against in the <key>: { \"<predicate>\": \"<value>\" } form")
  public Object getCookies() {
    return cookies;
  }

  public void setCookies(Object cookies) {
    this.cookies = cookies;
  }

  public Body8 body(String body) {
    this.body = body;
    return this;
  }

   /**
   * Body string to match against
   * @return body
  **/
  @Schema(example = "Hello world", description = "Body string to match against")
  public String getBody() {
    return body;
  }

  public void setBody(String body) {
    this.body = body;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Body8 body8 = (Body8) o;
    return Objects.equals(this.method, body8.method) &&
        Objects.equals(this.url, body8.url) &&
        Objects.equals(this.absoluteUrl, body8.absoluteUrl) &&
        Objects.equals(this.headers, body8.headers) &&
        Objects.equals(this.cookies, body8.cookies) &&
        Objects.equals(this.body, body8.body);
  }

  @Override
  public int hashCode() {
    return Objects.hash(method, url, absoluteUrl, headers, cookies, body);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Body8 {\n");
    
    sb.append("    method: ").append(toIndentedString(method)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    absoluteUrl: ").append(toIndentedString(absoluteUrl)).append("\n");
    sb.append("    headers: ").append(toIndentedString(headers)).append("\n");
    sb.append("    cookies: ").append(toIndentedString(cookies)).append("\n");
    sb.append("    body: ").append(toIndentedString(body)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
